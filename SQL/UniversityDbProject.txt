-- Create and use the university database
CREATE DATABASE University_db;
USE University_db


-- Create the Courses table
CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(80) NOT NULL,
    instructor VARCHAR(120) NOT NULL,
    credits INT NOT NULL
);

-- Create the Students table with a foreign key reference to Courses
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(120) NOT NULL,
    last_name VARCHAR(120) NOT NULL,
    date_of_birth DATE NOT NULL,
    course_id INT NOT NULL,
	CONSTRAINT fk_student_course FOREIGN KEY (course_id) REFERENCES Courses(course_id)
   );

--Data insertion in Courses table
INSERT INTO Courses(course_id, course_name, instructor, credits)
VALUES 
(101, 'Introduction to CS', 'Prof. Anderson', 3),
(102, 'Biology 101', 'Prof. White', 4),
(103, 'Physics for Majors', 'Prof. Rodriguez', 4),
(104, 'Calculus I', 'Prof. Brown', 3),
(105, 'Organic Chemistry', 'Prof. Taylor', 4),
(106, 'Data Structures', 'Prof. Martinez', 3),
(107, 'Genetics', 'Prof. Johnson', 4),
(108, 'Quantum Physics', 'Prof. Adams', 4),
(109, 'Linear Algebra', 'Prof. Turner', 3),
(110, 'Analytical Chemistry', 'Prof. Hall', 4),
(111, 'Algorithms', 'Prof. Morris', 3),
(112, 'Ecology', 'Prof. Stewart', 4),
(113, 'Astrophysics', 'Prof. Nelson', 4),
(114, 'Discrete Mathematics', 'Prof. Hill', 3),
(115, 'Inorganic Chemistry', 'Prof. Baker', 4),
(116, 'Artificial Intelligence', 'Prof. Clark', 3),
(117, 'Cell Biology', 'Prof. Scott', 4),
(118, 'Thermodynamics', 'Prof. Cooper', 4),
(119, 'Probability Theory', 'Prof. Foster', 3),
(120, 'Human Anatomy', 'Prof. Powell', 4),
(121, 'Software Engineering', 'Prof. King', 3),
(122, 'Microbiology', 'Prof. Perez', 4),
(123, 'Electromagnetism', 'Prof. Thomas', 4),
(124, 'Number Theory', 'Prof. Davis', 3),
(125, 'Organic Synthesis', 'Prof. Miller', 4),
(126, 'Computer Networks', 'Prof. Brown', 3),
(127, 'Animal Physiology', 'Prof. Taylor', 4),
(128, 'Machine Learning', 'Prof. Robinson', 4),
(129, 'Differential Equations', 'Prof. Adams', 3),
(130, 'Virology', 'Prof. Turner', 4);

--Data insertion in Students table
INSERT INTO Students(student_id , first_name , last_name , date_of_birth , course_id)
VALUES
(1, 'John', 'Doe', '1998-05-15',101),
(2, 'Jane', 'Smith', '1999-02-20',102),
(3, 'Alex', 'Johnson', '1997-09-10',103),
(4, 'Emily', 'Davis', '2000-07-03',104),
(5, 'Chris', 'Miller', '1998-12-22',105),
(6, 'Sarah', 'Wilson', '1999-08-30',106),
(7, 'Michael', 'Taylor', '1997-04-18',103),
(8, 'Jessica', 'Brown', '2001-01-25',102),
(9, 'David', 'Anderson', '1998-11-08',105),
(10, 'Emma', 'Garcia', '1999-06-12',104),
(11, 'Daniel', 'Martinez', '2000-03-07',101),
(12, 'Olivia', 'Thomas', '1997-12-04',102),
(13, 'Ethan', 'Robinson', '1998-09-17',103),
(14, 'Ava', 'White', '1999-07-20',104),
(15, 'Noah', 'Hall', '1998-02-11',105),
(16, 'Sophia', 'Adams', '2000-10-03',106),
(17, 'Liam', 'Clark', '1997-05-26',102),
(18, 'Isabella', 'Hill', '1999-11-15',103),
(19, 'Lucas', 'Nelson', '1998-08-07',104),
(20, 'Mia', 'Baker', '2001-04-22',105),
(21, 'Amelia', 'Morris', '1997-01-14',106),
(22, 'Benjamin', 'Turner', '1999-10-09',102),
(23, 'Harper', 'King', '2000-06-02',103),
(24, 'Jackson', 'Perez', '1998-03-25',104),
(25, 'Evelyn', 'Scott', '1999-12-18',105),
(26, 'Lincoln', 'Stewart', '1998-07-11',106),
(27, 'Aria', 'Cooper', '2000-04-04',102),
(28, 'Jack', 'Ross', '1997-09-27',103),
(29, 'Lily', 'Foster', '1998-06-19',104),
(30, 'Owen', 'Powell', '2001-02-02',105);

SELECT *
FROM Students

SELECT *
FROM Courses

SELECT *
FROM Students
WHERE course_id = 102

SELECT *
FROM Courses
WHERE instructor = 'Prof. White'

SELECT first_name, last_name, course_id
FROM Students

SELECT COUNT(*) AS TotalStudents
FROM Students;

SELECT AVG(credits)
FROM Courses;

SELECT *
FROM Students
WHERE YEAR(date_of_birth)  > '1999';

SELECT course_id, course_name, credits
FROM Courses
WHERE credits > 3 
ORDER BY credits DESC;

SELECT Students.first_name, Students.last_name, Courses.course_name, Courses.course_id
FROM Students
INNER JOIN Courses ON Students.course_id = Courses.course_id;

SELECT Courses.course_id, Courses.course_name, Students.first_name, Students.last_name
FROM Students
INNER JOIN Courses ON Students.course_id = Courses.course_id
GROUP BY last_name;